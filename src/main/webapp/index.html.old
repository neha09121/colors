<!-- 2. Retrieve and render a collection of objects from a server, handle state transitions
Using languages, frameworks and tools of your choice, implement the following:

A web service that exposes a REST interface, and allows the client to retrieve a collection of objects.
    a. Each object has the following attributes: id, and 'color'. Color can be one of red, green or blue.
A client UI that:
    a. Retrieves the collection of objects from the web service
    b. Displays objects while grouping them based on the associated color
    c. Allows the user to reassign any object to a different color -->
<!DOCTYPE html>
<html>
<head>
<title>ColorList API Client</title>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<link
	href="http://netdna.bootstrapcdn.com/twitter-bootstrap/2.3.2/css/bootstrap-combined.min.css"
	rel="stylesheet">
<script src="http://ajax.aspnetcdn.com/ajax/jquery/jquery-1.9.0.js"></script>
<script
	src="http://netdna.bootstrapcdn.com/twitter-bootstrap/2.3.2/js/bootstrap.min.js"></script>
<script src="http://ajax.aspnetcdn.com/ajax/knockout/knockout-2.2.1.js"></script>
</head>
<body>
	<div class="navbar">
		<div class="navbar-inner">
			<a class="brand" href="#">ColorList API Client</a>
		</div>
	</div>
	<div id="main" class="container">

		<table class="table table-striped">
			<tr>
				<td style="width: 1px;"></td>
				<td><b>Color</b></td>
			</tr>
			<!-- ko foreach: tasks -->
			<tr>

				<td><p>
						<b data-bind="text: title"></b>
					</p>
					<p data-bind="text: description"></p></td>
				<td>
					<button data-bind="click: $parent.beginEdit" class="btn">Edit</button>
					<button data-bind="click: $parent.remove" class="btn">Delete</button>
				</td>
			</tr>
			<!-- /ko -->
		</table>
		<button data-bind="click: beginAdd" class="btn">Add Colors</button>
		<button data-bind="click: getAll" class="btn">Get Colors</button>

	</div>
	<div id="add" class="modal hide fade" tabindex="=1" role="dialog"
		aria-labelledby="addDialogLabel" aria-hidden="true">
		<div class="modal-header">
			<button type="button" class="close" data-dismiss="modal"
				aria-hidden="true">Ã—</button>
			<h3 id="addDialogLabel">Add Task</h3>
		</div>
		<div class="modal-body">
			<form class="form-horizontal">
				<div class="control-group">
					<label class="control-label" for="inputTask">Task</label>
					<div class="controls">
						<input data-bind="value: title" type="text" id="inputTask"
							placeholder="Task title" style="width: 150px;">
					</div>
				</div>
				<div class="control-group">
					<label class="control-label" for="inputDescription">Description</label>
					<div class="controls">
						<input data-bind="value: description" type="text"
							id="inputDescription" placeholder="Description"
							style="width: 300px;">
					</div>
				</div>
			</form>
		</div>
		<div class="modal-footer">
			<button data-bind="click: addTask" class="btn btn-primary">Add
				Color</button>
			<button class="btn" data-dismiss="modal" aria-hidden="true">Cancel</button>
		</div>
	</div>

</body>
<script type="text/javascript">
	function TasksViewModel() {
		var self = this;
		self.tasksURI = 'http://localhost:8080/colors/api/v1.0/colors';
		//self.username = "miguel";
		//self.password = "python";
		self.tasks = ko.observableArray();

		self.ajax = function(uri, method, data) {
			var request = {
				url : uri,
				type : method,
				contentType : "application/json",
				accepts : "application/json",
				cache : false,
				dataType : 'json',
				data : JSON.stringify(data),
				/* beforeSend : function(xhr) {
					xhr.setRequestHeader("Authorization", "Basic "
							+ btoa(self.username + ":" + self.password));
				}, */
				error : function(jqXHR) {
					console.log("ajax error " + jqXHR.status);
				}
			};
			return $.ajax(request);
		}

		/* self.tasks([ {
			title : ko.observable('title #1'),
			description : ko.observable('description #1'),
			done : ko.observable(false)
		}]);
		 */
		self.beginAdd = function() {
			//alert("Add");

			//$('add').modal('show');

			self.ajax(self.tasksURI, 'POST', task).done(function(data) {
				self.tasks.push({
					uri : ko.observable(data.task.uri),
					title : ko.observable(data.task.title),
					description : ko.observable(data.task.description),
					done : ko.observable(data.task.done)
				});
			});
		}
		self.getAll = function() {
			alert("Get all");
		}
		self.beginEdit = function(task) {
			alert("Edit: " + task.title());
		}
		self.remove = function(task) {
			alert("Remove: " + task.title());
		}
		self.ajax(self.tasksURI, 'GET').done(function(data) {
			for (var i = 0; i < data.tasks.length; i++) {
				self.tasks.push({
					uri : ko.observable(data.tasks[i].uri),
					title : ko.observable(data.tasks[i].title),
					description : ko.observable(data.tasks[i].description)
				});
			}
		});
	}
	function AddTaskViewModel() {
		var self = this;
		self.title = ko.observable();
		self.description = ko.observable();

		self.addTask = function() {
			$('#add').modal('hide');
			tasksViewModel.add({
				title : self.title(),
				description : self.description()
			});
			self.title("");
			self.description("");
		}
	}
	var tasksViewModel = new TasksViewModel();
	var addTaskViewModel = new AddTaskViewModel();
	ko.applyBindings(tasksViewModel, $('#main')[0]);
	ko.applyBindings(addTaskViewModel, $('#add')[0]);
</script>
</html>